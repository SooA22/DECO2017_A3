% view.layout = 'default';
% ctx.stash.title = "Recipe Details"

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html, body {
    background-color: #FAF3F0;
    min-height: 100vh;
    width: 100%;
  }

  .page-wrapper {
  background-color: #FAF3F0;
  min-height: 100vh;
  padding: 2rem;
  font-family: Arial, sans-serif;
  width: 100vw;
  box-sizing: border-box;
}

  .recipe-card {
  width: 100%;
  max-width: none;
  margin: 0 auto 1.5rem auto;
  background: white;
  border: 2px solid #8B0000;
  border-radius: 16px;
  padding: 2rem;
  box-sizing: border-box;
}

  .top-section,
  .bottom-section {
    display: flex;
    gap: 2rem;
    flex-wrap: nowrap;
  }

  .image-area {
    width: 33.33%;
  }

  .info-area {
    width: 66.66%;
    min-width: 0;
  }

  .ingredients {
    width: 33.33%;
  }

  .steps {
    width: 66.66%;
  }

  @media (max-width: 768px) {
    .top-section,
    .bottom-section {
      flex-direction: column;
    }

    .image-area,
    .info-area,
    .ingredients,
    .steps {
      width: 100%;
    }

    .recipe-card {
      padding: 1rem;
    }

    h2, h3 {
      font-size: 1.5rem;
    }
  }

.comments-section {
    margin-top: 1.5rem;
    border: 2px solid #8B0000;
    border-radius: 12px;
    padding: 0.8rem;
    background-color: #F8EDEB;
  }

  .comments-section h3 {
    color: #8B0000;
    font-family: 'Russo One', sans-serif;
    margin-bottom: 0.8rem;
    font-size: 1.3rem;
  }

  .comment {
    display: flex;
    align-items: flex-start;
    gap: 0.4rem;
    margin-bottom: 0.8rem;
    padding: 0.6rem;
    background-color: #fff;
    border-radius: 8px;
    border: 1px solid #ddd;
    transition: transform 0.2s ease;
  }

  .comment:hover {
    transform: translateX(3px);
  }

  .comment-icon {
    font-size: 1.3rem;
    flex-shrink: 0;
  }

  .comment-text {
    flex: 1;
    padding: 0;
    background: none;
    border: none;
    font-size: 0.9rem;
  }

  .comment-text strong {
    color: #8B0000;
    font-weight: bold;
  }

  .comment-input {
    margin-top: 0.8rem;
    display: flex;
    gap: 0.4rem;
    align-items: center;
  }

  .comment-input .name-input {
    flex: 3;
    padding: 0.5rem 0.8rem;
    border: 1px solid #8B0000;
    border-radius: 20px;
    outline: none;
    font-size: 13px;
    height: 35px;
    box-sizing: border-box;
  }

  .comment-input input[type="text"]:not(.name-input) {
    flex: 7;
    padding: 0.5rem 0.8rem;
    border: 1px solid #8B0000;
    border-radius: 20px;
    outline: none;
    height:35px;
    box-sizing: border-box;
    font-size: 13px;
  }

  .comment-input .name-input:focus,
  .comment-input input[type="text"]:not(.name-input):focus {
    border-color: #FF4444;
    box-shadow: 0 0 0 2px rgba(255, 68, 68, 0.1);
  }

  .add-btn {
    background: #8B0000;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    font-size: 13px;
    font-weight: bold;
    transition: background-color 0.2s ease;
  }

  .add-btn:hover {
    background: #FF4444;
  }

  .emoji-selector {
    display: flex;
    gap: 0.2rem;
    margin-top: 0.4rem;
    justify-content: center;
  }

  .emoji-btn {
    background: white;
    border: 2px solid #ddd;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    font-size: 1em;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .emoji-btn:hover {
    border-color: #8B0000;
    transform: scale(1.1);
  }

  .emoji-btn.selected {
    border-color: #8B0000;
    background-color: #F8EDEB;
  }

  .new-comment {
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

@media (max-width: 900px) {
  [style*="display: flex;"][style*="gap: 2vw;"] {
    flex-direction: column !important;
    gap: 2rem !important;
  }
  [style*="display: grid;"] {
    grid-template-columns: 1fr 1fr !important;
  }
  pre, code {
    overflow-wrap: break-word;
  }
}

@media (max-width: 600px) {
  [style*="display: grid;"] {
    grid-template-columns: 1fr !important;
  }
  [style*="width: 370px;"] {
    width: 98vw !important;
    min-width: 0 !important;
    height: auto !important;
    margin: 0 auto 1rem auto !important;
  }
    pre, code {
    overflow-wrap: break-word
    }
    
  .comment-input {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .comment-input .name-input {
    width: 100%;
  }
}
</style>

<div class="page-wrapper">
  <!-- Logo -->
  <div style="text-align: center; margin-bottom: 2rem;">
    <a href="/" target="_self" style="text-decoration: none;">
      <h1 style="font-family: 'Russo One', sans-serif; font-size: 2.5rem; color: #8B0000; margin: 0;">BlaBites</h1>
    </a>
  </div>

  <div class="recipe-card">
    <!-- Top Section: Image + Info -->
    <div class="top-section">
      <!-- Left: Image -->
      <div class="image-area">
        <div style="width: 100%; padding-bottom: 100%; background: #F5E6E6; border-radius: 8px; position: relative; overflow: hidden;">
      <% 
        const imageMap = {
          'Fried Chicken': 'fried chicken.jpg',
          'Pad Thai': 'pad thai.jpg',
          'Spaghetti Bolognese': 'spaghetti.jpg',
          'Caesar Salad': 'salad.jpg',
          'Tacos': 'taco.jpg',
          'Pancakes': 'pancake.jpg',
          'Fried Chicken': 'fried chicken.jpg',
          'Pad thai': 'pad thai.jpg'
        };
        const recipeImage = imageMap[ctx.stash.recipe?.title] || 'fried chicken.jpg';
      %>
      <img src="/static/images/recipes/<%= recipeImage %>" alt="<%= ctx.stash.recipe?.title %>" 
                style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;">

        </div>
      </div>


      <!-- Right: Info -->
      <div class="info-area">
        <!-- Title + Meta -->
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
          <div>
            <h2 style="font-family: 'Russo One', sans-serif; font-size: 2rem; color: #8B0000; margin: 0;">
              <%= ctx.stash.recipe?.title || 'Recipe Title' %>
            </h2>
            <div style="display: inline-block; background: #8B0000; color: white; padding: 0.2rem 0.8rem; border-radius: 12px; font-size: 0.9rem; margin-top: 0.5rem;">
              <%= ctx.stash.recipe?.category || 'Category' %>
            </div>
          </div>
          <div style="text-align: right;">
            <div style="font-family: 'Russo One', sans-serif; color: #2d2d2d;">
              <%= ctx.stash.recipe?.author || 'Anonymous' %>
            </div>
            <div style="color: #FF4444; margin-top: 0.3rem;">
              ‚ù§ <%= ctx.stash.recipe?.likes || 0 %> Likes
            </div>
          </div>
        </div>

        <!-- Description -->
        <p style="color: #444; font-size: 0.95rem; line-height: 1.4;">
          <%= ctx.stash.recipe?.description || 'no description' %>
        </p>

        <!-- Tags -->
        <div style="margin-top: 1rem;">
          % for (const tag of ctx.stash.recipe?.tags || []) {
            <span style="display: inline-block; background: #eee; border-radius: 12px; padding: 0.3rem 0.8rem; margin-right: 0.5rem; margin-bottom: 0.5rem; font-size: 0.85rem;">#<%= tag %></span>
          % }
        </div>
      </div>
    </div>

    <!-- Bottom Section: Ingredients + Steps -->
    <div class="bottom-section" style="margin-top: 2rem;">
      <!-- Ingredients -->
      <div class="ingredients">
        <h3 style="color: #8B0000; font-family: 'Russo One', sans-serif;">Ingredients</h3>
        <ul style="padding-left: 1rem;">
          % for (const ing of ctx.stash.recipe?.ingredients || []) {
            <li><%= ing %></li>
          % }
        </ul>
      </div>

      <!-- Steps -->
      <div class="steps">
        <h3 style="color: #8B0000; font-family: 'Russo One', sans-serif;">Steps</h3>
        <ol style="padding-left: 1rem;">
          % let i = 1;
          % for (const step of ctx.stash.recipe?.steps || []) {
            <li style="margin-bottom: 1rem;"><strong>Step <%= i++ %>:</strong> <%= step %></li>
          % }
        </ol>
      </div>
    </div>
  </div>

  <!-- comment section -->
  <div class="comments-section">
    <h3>Comments (<span id="comment-count">3</span>)</h3>

    <div id="comments-container">
      <div class="comment">
        <div class="comment-icon">üë§</div>
        <div class="comment-text">
          <strong>Tim</strong><br>
          I love your recipe!
        </div>
      </div>

      <div class="comment">
        <div class="comment-icon">üßë‚Äçüç≥</div>
        <div class="comment-text">
          <strong>Trim</strong><br>
          I should try this for my dinner
        </div>
      </div>

      <div class="comment">
        <div class="comment-icon">üë©‚Äç‚ù§Ô∏è‚Äçüë©</div>
        <div class="comment-text">
          <strong>Tom</strong><br>
          Thank u for the amazing recipe!!
        </div>
      </div>
    </div>

    <div class="comment-input">
      <input type="text" class="name-input" placeholder="Your name" id="name-input">
      <input type="text" placeholder="Add Comments for this Recipe!" id="comment-input">
      <button class="add-btn" onclick="addComment()">Add</button>
    </div>
    
    <div class="emoji-selector">
      <button class="emoji-btn selected" onclick="selectEmoji(this, 'üë§')">üë§</button>
      <button class="emoji-btn" onclick="selectEmoji(this, 'üßë‚Äçüç≥')">üßë‚Äçüç≥</button>
      <button class="emoji-btn" onclick="selectEmoji(this, 'üë©‚Äç‚ù§Ô∏è‚Äçüë©')">üë©‚Äç‚ù§Ô∏è‚Äçüë©</button>
      <button class="emoji-btn" onclick="selectEmoji(this, 'üòä')">üòä</button>
      <button class="emoji-btn" onclick="selectEmoji(this, 'ü§§')">ü§§</button>
      <button class="emoji-btn" onclick="selectEmoji(this, '‚ù§Ô∏è')">‚ù§Ô∏è</button>
    </div>
  </div>
</div>

<script>
let commentCount = 3;
let selectedEmoji = 'üë§';

function selectEmoji(btn, emoji) {
  // Remove selected class from all buttons
  document.querySelectorAll('.emoji-btn').forEach(b => b.classList.remove('selected'));
  // Add selected class to clicked button
  btn.classList.add('selected');
  selectedEmoji = emoji;
}

function addComment() {
  const nameInput = document.getElementById('name-input');
  const commentInput = document.getElementById('comment-input');
  const commentsContainer = document.getElementById('comments-container');
  const commentCountSpan = document.getElementById('comment-count');

  const name = nameInput.value.trim();
  const comment = commentInput.value.trim();

  if (name === '' || comment === '') {
    alert('Please enter both your name and comment!');
    return;
  }

  // Create new comment element
  const newComment = document.createElement('div');
  newComment.className = 'comment new-comment';
  newComment.innerHTML = `
    <div class="comment-icon">${selectedEmoji}</div>
    <div class="comment-text">
      <strong>${escapeHtml(name)}</strong><br>
      ${escapeHtml(comment)}
    </div>
  `;

  // Add to container
  commentsContainer.appendChild(newComment);

  // Update count
  commentCount++;
  commentCountSpan.textContent = commentCount;

  // Clear inputs
  nameInput.value = '';
  commentInput.value = '';

  // Scroll to new comment
  newComment.scrollIntoView({ behavior: 'smooth' });
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// Allow Enter key to submit
document.getElementById('comment-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    addComment();
  }
});

document.getElementById('name-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    document.getElementById('comment-input').focus();
  }
});
</script>

</div>